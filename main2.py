import asyncio
import logging
import config
import aiocron
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.webhook import SendMessage
from aiogram.utils.executor import start_webhook
from aiogram.types.message import ContentType
from aiogram.utils.emoji import emojize
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
import asyncio
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import requests
import pickle
import feedparser
import schedule

# webhook settings
WEBHOOK_PATH = '/'
WEBHOOK_URL = "https://www.uchenikoff.ru/ZZZZ/"

# webserver settings
WEBAPP_HOST = '127.0.0.1'  # or ip
WEBAPP_PORT = 7772

logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(config.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

feed_list =["https://schzg719.mskobr.ru/data/rss", "https://www.youtube.com/feeds/videos.xml?channel_id=UCv9aT7dS9XEN1N7qU0gWNOA"
            ]

users=[]
old=[910986423, -138199754, -1001151746840, -1001243467239, 530476066, 1036301915, 388802767, 359619030, 525423455, 826877425]
admin=91440724
c=()

class ZadStatus(StatesGroup):
	say = State()
	vzad = State()
	zad = State()
	pereslat = State()

def get_users():
	global users
	f = open('users', 'rb')
	users = pickle.load(f)
	f.close()
	print(users)
		
get_users()
		
@dp.message_handler(commands=["start"])
async def start(message):
	global users
	global c
	global admin
	username=message.from_user.first_name #–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	f = open('users', 'wb') #–æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –Ω–∞ –¥–æ–∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏–π
	if message.chat.id not in users: #–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
			users.append(message.chat.id)
#			users.extend(old)
			await bot.send_message(admin, '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(username) + ' ' + message.from_user.username + ' ' + str(message.chat.id))
	pickle.dump(users, f)
	f.close()
	get_users()
	if message.chat.id==admin:
		c=ad_mainmenu
	else:
		c=mainmenu
	await bot.send_chat_action(message.chat.id, 'typing')
	await asyncio.sleep(1)
	await bot.send_sticker(message.chat.id, 'CAADAgADa1kAAp7OCwABtPtscVkaOGoWBA')
	await bot.send_message(message.chat.id, "–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å–≤–æ–≤–∞—Ç—å " + username + " –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø–æ–º–æ—à–Ω–∏–∫–µ. \n –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Ü.—Å–µ—Ç–µ–π. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start. –ê –µ—â–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ–Ω –±—É–¥–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É.", reply_markup=c)

@dp.message_handler(commands=["stop"])
async def stop(message):
	global users
	global c
	username=message.from_user.first_name #–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	f = open('users', 'wb')
	g = str(message.chat.id)
	try:
		users.remove(g)
		await bot.send_message(admin, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è " + str(message.chat.id) + ' ' + message.from_user.first_name + ' ' + message.from_user.username)
		await bot.send_message(message.chat.id, text='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ –≤—Å–µ –µ—â–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–Ω–∏ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–æ). –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –£–¥–∞—á–Ω–æ–≥–æ –í–∞–º –¥–Ω—è.')
		pickle.dump(users, f)
	except:
		await message.reply('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start')
		pickle.dump(users, f)
	f.close()
	get_users()
		
@dp.message_handler(commands=['pereslat'], state="*") #—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É pereslat
async def pereslat(message: types.Message):
	global admin
	if message.chat.id == admin:
		await bot.send_message(message.chat.id, text="–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ", reply_markup=keyboard3)
		await ZadStatus.pereslat.set()

@dp.message_handler(state=ZadStatus.pereslat, content_types=types.ContentTypes.ANY)
async def pereslat2(message: types.Message, state: FSMContext):
        global users
        global c
        if message.text=="‚ùå–û–¢–ú–ï–ù–ê":
            await message.answer("–û–•–†–ê–ù–ê! –û–¢–ú–ï–ù–ê!", reply_markup=c)
            await state.finish()
        else:
            get_users()
            for i in users: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–∞—Å—Å–∏–≤—É
                try:
                    if message.media_group_id != 'None':
                        await bot.forward_message(i, admin, message.message_id)
                        await asyncio.sleep(1)
                    else:
                        await bot.forward_media_group(i, admin, message.media_group_id)
                except:
                    await bot.send_message(admin, str(i) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            await message.reply("–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=c)
            await state.finish()
@dp.message_handler(commands="say", state="*") #—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É vzad
async def vzadanie(message: types.Message):
	await bot.send_message(message.chat.id, text="–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à–∫–æ–ª—ã. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤,  –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.", reply_markup=keyboard3)
	await ZadStatus.vzad.set()
	
@dp.message_handler(state=ZadStatus.say, content_types=types.ContentTypes.ANY)
async def vzadanie2(message: types.Message, state: FSMContext):
	global admin
	if message.chat.id==admin:
		c=keyboard2
	else:
		c=keyboard1
	if message.text=="‚ùå–û–¢–ú–ï–ù–ê":
		await message.answer("–û–•–†–ê–ù–ê! –û–¢–ú–ï–ù–ê!", reply_markup=c)
		await state.finish()
	else:
		await bot.forward_message(admin, message.chat.id, message.message_id)
		await message.reply("–ü–æ—Å–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", reply_markup=c)
		await state.finish()
		
@dp.message_handler(content_types=['text'], state="*")
async def main(message: types.Message):  # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	global c
	cousers=0
	cugrup=0
	global users
	if message.text == "–ü—Ä–∏–≤–µ—Ç" or message.text == "üè´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or message.text == "/main" or message.text == "/start":
		await start(message)
	elif message.text == "üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_sticker(message.chat.id, 'CAADAgADglkAAp7OCwABF1LyypVAYq0WBA')
		await bot.send_message(message.chat.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ \n [–°—Å—ã–ª–∫–∞](https://schzg719.mskobr.ru/info_add/raspisanie-urokov)", reply_markup=mainmenu, parse_mode='Markdown')
	elif message.text == "üñã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–∂–æ–∫":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_message(message.chat.id, text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–∂–æ–∫ \n [–°—Å—ã–ª–∫–∞](https://www.mos.ru/pgu/ru/application/dogm/077060701/#step_1)", reply_markup=mainmenu, parse_mode='Markdown')
	elif message.text == "üì≤–ü–æ–¥–∫–ª—é—á–∏—Ç—å —à–∫–æ–ª—å–Ω—ã–π WiFi":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_sticker(message.chat.id, 'CAADAgADc1kAAp7OCwABUikOpbNvciIWBA')
		await bot.send_message(message.chat.id, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å —à–∫–æ–ª—å–Ω—ã–π WiFi \n 	–®–∞–≥ –ø–µ—Ä–≤—ã–π –Ω–∞ –ü–æ—Ä—Ç–∞–ª–µ –≥–æ—Å—É–ª—É–≥ –Ω–∞–¥–æ –∏–º–µ—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å, –∞ –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π. \n –®–∞–≥ –≤—Ç–æ—Ä–æ–π, –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–Ω–æ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é. –ß—Ç–æ –±—ã —É —Ç–µ–±—è –±—ã–ª –¥–æ—Å—Ç—É–ø –≤ –î–Ω–µ–≤–Ω–∏–∫. \n	–®–∞–≥ —Ç—Ä–µ—Ç–∏–π –≤ –î–Ω–µ–≤–Ω–∏–∫–µ —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞. –í—Ö–æ–¥–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ —É–∂–µ —Ç–∞–º –±—É–¥–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ú–≠–® –∏ —à–∫–æ–ª—å–Ω–æ–≥–æ WiFi \n –®–∞–≥ –ø–æ—Å–ª–µ–¥–Ω–∏–π, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–ª–∞–Ω—à–µ—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —à–∫–æ–ª—å–Ω–æ–π –≤–∞—Ñ–ª–µ, —ç—Ç–æ —É–∂–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ \n	[–°—Å—ã–ª–∫–∞](https://t.me/iv?url=https%3A%2F%2Fuchebnik.mos.ru%2Fhelp%2Fstats%2Fwifi%2Fopenwifi&rhash=f33defb321a418)", parse_mode='Markdown')
		await bot.send_message(message.chat.id, text='–ê –µ—â–µ –∫ —Å–µ—Ç–∏ STUDY.MOS –º–æ–∂–Ω–æ –ø–æ–¥–ª–∫–ª—é—á–∏—Ç—Å—è –≤ –ª—é–±–æ–π —à–∫–æ–ª–µ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —É—á–µ—Ç–∫–∞ –Ω–∞ mos.ru –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è [–°—Å—ã–ª–∫–∞](https://uchebnik.mos.ru/help/stats/wifi/studymos)', reply_markup=mainmenu, parse_mode='Markdown')
	elif message.text == "üìö–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_sticker(message.chat.id, 'CAADAgADdFkAAp7OCwABOKfFBU7BxRQWBA')
		await bot.send_message(message.chat.id, text="–ù–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", reply_markup=bibliomenu, parse_mode='Markdown')
	elif message.text == "‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_sticker(message.chat.id, 'CAADAgADelkAAp7OCwABYMZXStSxz9YWBA')
		await bot.send_message(message.chat.id, text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", reply_markup=contaktsmenu) 
	elif message.text == "üì¢–ù–æ–≤–æ—Å—Ç–∏":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_message(message.chat.id, text="–ù–æ–≤–æ—Å—Ç–∏ —à–∫–æ–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞: \n [–°—Å—ã–ª–∫–∞](https://t.me/iv?url=https%3A%2F%2Fschzg719.mskobr.ru%2Fnovosti&rhash=b48987ea0be3c5)", reply_markup=mainmenu, parse_mode='Markdown')
	elif message.text == "üìñ–ö–Ω–∏–≥–∏ –∏ —É—á–µ–±–Ω–∏–∫–∏":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_message(message.chat.id, text="–ö–Ω–∏–≥–∏ –∏ —É—á–µ–±–Ω–∏–∫–∏ \n [–°—Å—ã–ª–∫–∞](https://schzg719.mskobr.ru/info_add/uchebniki_i_uchebnye_posobiya)", reply_markup=bibliomenu, parse_mode='Markdown')
#	elif message.text == "üßæ–ñ—É—Ä–Ω–∞–ª 8 –ê":
#		await bot.send_chat_action(message.chat.id, 'typing')
#		await asyncio.sleep(1)
#		await bot.send_message(message.chat.id, text="–ñ—É—Ä–Ω–∞–ª –∫–ª–∞—Å—Å–∞ \n [–°—Å—ã–ª–∫–∞](https://t.me/iv?url=https%3A%2F%2Fschzg719.mskobr.ru%2Fedu-news%2F2401&rhash=b48987ea0be3c5)", reply_markup=bibliomenu, parse_mode='Markdown')
	elif message.text == "üëÅ‚Äçüó®–®–∫–æ–ª—å–Ω—ã–π —Å–∞–π—Ç":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_message(message.chat.id, text="–®–∫–æ–ª—å–Ω—ã–π —Å–∞–π—Ç: \n [–°—Å—ã–ª–∫–∞](https://schzg719.mskobr.ru/)", reply_markup=contaktsmenu, parse_mode='Markdown')
	elif message.text == "üó£–°–æ—Ü—Å–µ—Ç–∏":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_sticker(message.chat.id, 'CAADAgADfFkAAp7OCwABXIP9BynOq5UWBA', reply_markup=contaktsmenu)
		await bot.send_message(message.chat.id, text="Youtube: \n [–°—Å—ã–ª–∫–∞](https://www.youtube.com/channel/UCv9aT7dS9XEN1N7qU0gWNOA/)", reply_markup=contaktsmenu, parse_mode='Markdown')
		await bot.send_message(message.chat.id, text="Instagram: \n [–°—Å—ã–ª–∫–∞](https://www.instagram.com/s719zelao/)", reply_markup=contaktsmenu, parse_mode='Markdown')
		await bot.send_message(message.chat.id, text="VK: \n [–°—Å—ã–ª–∫–∞](https://vk.com/s719zelao)", reply_markup=contaktsmenu, parse_mode='Markdown')
	elif message.text == "üì®–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—å—Å–º–æ":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_sticker(message.chat.id, 'CAADAgADcVkAAp7OCwABOa0ndWVQ9koWBA')
		await bot.send_message(message.chat.id, text="–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—å—Å–º–æ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é? \n 719@edu.mos.ru \n –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–º–∞–Ω–¥–æ–π /say", reply_markup=contaktsmenu, parse_mode='Markdown')
	elif message.text == "üè´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		await bot.send_chat_action(message.chat.id, 'typing')
		await asyncio.sleep(1)
		await bot.send_message(message.chat.id, "–ß–µ–º –ø–æ–º–æ—á—å?", reply_markup=mainmenu)
	elif message.text == "–ê–¥–º–∏–Ω–∫–∞":
		if message.chat.id==admin:
			c=ad_pere
		else:
			c=mainmenu
		await bot.send_message(message.chat.id, text="–° –±–æ–ª—å—à–æ–π —Å–∏–ª–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∞—è –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å!", reply_markup=c, parse_mode='Markdown')
	elif message.text == "üó£–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º":
		if message.chat.id==admin:
			c=ad_pere
		else:
			c=mainmenu
		await pereslat(message)
		
	elif message.text == "üó£–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ rss":
		if message.chat.id==admin:
			c=ad_pere
		else:
			c=mainmenu
		await bot.send_message(message.chat.id, text="–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π", reply_markup=c, parse_mode='Markdown')
		await feederek()
	elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		if message.chat.id==admin:
			c=ad_pere
		else:
			c=mainmenu
		get_users()
		for user in users:
			if int(user)<0:
				cugrup+=1
		cousers=len(users)-cugrup
		await bot.send_message(message.chat.id, text="–í –±–æ—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É " + str(cousers) + " —á–µ–ª–æ–≤–µ–∫ –∏ " + str(cugrup) + " –≥—Ä—É–ø–ø", reply_markup=c, parse_mode='Markdown')
		cousers=0
		cogrup=0
		

@dp.message_handler(content_types=['voice'])
async def voice_mess(message):  # –Ω–µ–Ω–∞–≤–∏–∂—É –≥–æ–ª–æ—Å–æ–≤—É—Ö–∏
	await bot.send_chat_action(message.chat.id, 'typing')
	await asyncio.sleep(1)
	await bot.send_sticker(message.chat.id, 'CAADAgADlVkAAp7OCwABfWS6BUi0NtUWBA')
	await bot.send_message(message.chat.id, text='–ù–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç –≥–æ–ª–æ—Å–æ–≤—É—Ö–∏.')
  
	

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é—à–µ–∫
ad_mainmenu = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
ad_pere = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
mainmenu = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
newsmenu = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
bibliomenu = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
contaktsmenu = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)

# –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω—é –∫–Ω–æ–ø–∫–∏
btn_tomain = types.KeyboardButton("üè´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ–Ω—é—à–µ–∫
admin_btn = types.KeyboardButton("–ê–¥–º–∏–Ω–∫–∞")
btn_news_lnk = types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ —à–∫–æ–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞")
btn_rasp = types.KeyboardButton("üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
btn_news_rss = types.KeyboardButton("–ü—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ª–∏—á–∫—É –í–∫–ª.\–í—ã–∫–ª.")
btn_biblio_books = types.KeyboardButton("üìñ–ö–Ω–∏–≥–∏ –∏ —É—á–µ–±–Ω–∏–∫–∏")
btn_biblio_jurnal = types.KeyboardButton("üßæ–ñ—É—Ä–Ω–∞–ª 8 –ê")
btn_cont_link = types.KeyboardButton("üëÅ‚Äçüó®–®–∫–æ–ª—å–Ω—ã–π —Å–∞–π—Ç")
btn_cont_soc = types.KeyboardButton("üó£–°–æ—Ü—Å–µ—Ç–∏")
btn_cont_email = types.KeyboardButton("üì®–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—å—Å–º–æ")
btn_news = types.KeyboardButton("üì¢–ù–æ–≤–æ—Å—Ç–∏")
btn_kruz = types.KeyboardButton("üñã–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—Ä—É–∂–æ–∫")
btn_wifi = types.KeyboardButton("üì≤–ü–æ–¥–∫–ª—é—á–∏—Ç—å —à–∫–æ–ª—å–Ω—ã–π WiFi")
btn_biblio = types.KeyboardButton("üìö–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
btn_contacts = types.KeyboardButton("‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã")
btn_pereslat = types.KeyboardButton("üó£–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º")
btn_feed = types.KeyboardButton("üó£–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ rss")
btn_stat = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
ad_mainmenu.add(btn_news, btn_rasp, btn_biblio, btn_kruz, btn_wifi, btn_contacts, admin_btn)
ad_pere.add(btn_tomain, btn_pereslat, btn_feed, btn_stat)
mainmenu.add(btn_news, btn_rasp, btn_biblio, btn_kruz, btn_wifi, btn_contacts)
newsmenu.add(btn_tomain, btn_news_lnk, btn_news_rss)
bibliomenu.add(btn_tomain, btn_biblio_books)
contaktsmenu.add(btn_tomain, btn_cont_link, btn_cont_soc, btn_cont_email)
keyboard3 = ReplyKeyboardMarkup(True, True)
keyboard3.row("‚ùå–û–¢–ú–ï–ù–ê")

async def feederek():

		last_feeds = pickle.load(open("db.p", 'rb'))
		fee_links = []
		for i in feed_list:
			fee = feedparser.parse(i)
			fee_title = fee.feed.title
			for x in range(5):
				fee_links.append(fee['entries'][x]['id'])
				if fee['entries'][x]['id'] in last_feeds:
					entry_title = fee['entries'][x]['title']
					entry_id = fee['entries'][x]['id']
					entry_link = fee['entries'][x]['link']
					await bot.send_message(admin, "Nothing new - " + entry_title)
				else:
					await asyncio.sleep(4)
					entry_title = fee['entries'][x]['title']
					entry_id = fee['entries'][x]['id']
					entry_link = fee['entries'][x]['link']
					await bot.send_message(admin, "Updated - " + entry_title)
					message = str(entry_title +"\n" + str(entry_link))
					for i in users:
						await asyncio.sleep(.05)
						try:
							await bot.send_message(i, text=message)
						except:
							await bot.send_message(admin, str(i) + " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
				pickle.dump(fee_links, open("db.p", 'wb'))
		return

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    logging.warning('Shutting down..')
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning('Bye!')

if __name__ == '__main__':
    aiocron.crontab('0 9 * * *', func=feederek)
    aiocron.crontab('0 17 * * *', func=feederek)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

